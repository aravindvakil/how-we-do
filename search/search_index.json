{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"How we do at Wakeflow This repo provides some documentation of our processes at Wakeflow. We share it publically so that our client and potential hires can learn about how we go about our business. If you have any questions/comments/inspiration please don't hesitate to reach out to contact@wakeflow.io or contribute directly by making a Pull Request (see How we contribute below). Coding How we contribute How we Javascript How we deploy How we configure our dotfiles How we test How we CI/CD How we backup Firestore How we track events How we validate Professional Development How we train How we holiday How we promote","title":"Home"},{"location":"#how-we-do-at-wakeflow","text":"This repo provides some documentation of our processes at Wakeflow. We share it publically so that our client and potential hires can learn about how we go about our business. If you have any questions/comments/inspiration please don't hesitate to reach out to contact@wakeflow.io or contribute directly by making a Pull Request (see How we contribute below).","title":"How we do at Wakeflow"},{"location":"#coding","text":"How we contribute How we Javascript How we deploy How we configure our dotfiles How we test How we CI/CD How we backup Firestore How we track events How we validate","title":"Coding"},{"location":"#professional-development","text":"How we train How we holiday How we promote","title":"Professional Development"},{"location":"cicd/","text":"How we CI/CD We continuously integrate and deploy changes to our code bases using Github Actions. In order to add a github action to a repo, one needs to add a cicd.yml file to the .github/workflows folder in the repo. Our Template The exact steps executed in the cicd.yml file depend on the requirements of the repo, but a good template can be found here: cicd.yml Secrets Often github actions require secrets, like e.g. auth tokens, that give the action permission to carry out the tasks it needs to edit cloud based resources. These can be added by the owner of the github repo. Help If you need help getting a ci/cd workflow set up, reach out to andi@wakeflow.io","title":"CI/CD"},{"location":"cicd/#how-we-cicd","text":"We continuously integrate and deploy changes to our code bases using Github Actions. In order to add a github action to a repo, one needs to add a cicd.yml file to the .github/workflows folder in the repo.","title":"How we CI/CD"},{"location":"cicd/#our-template","text":"The exact steps executed in the cicd.yml file depend on the requirements of the repo, but a good template can be found here: cicd.yml","title":"Our Template"},{"location":"cicd/#secrets","text":"Often github actions require secrets, like e.g. auth tokens, that give the action permission to carry out the tasks it needs to edit cloud based resources. These can be added by the owner of the github repo.","title":"Secrets"},{"location":"cicd/#help","text":"If you need help getting a ci/cd workflow set up, reach out to andi@wakeflow.io","title":"Help"},{"location":"contributing/","text":"How we contribute Any member of the team is encouraged to contribute to any and all of our code bases, including this how-we-do repo to make sure our documentation is always up to date. To make a contribution, make sure to follow the deploying instructions","title":"Contributing"},{"location":"contributing/#how-we-contribute","text":"Any member of the team is encouraged to contribute to any and all of our code bases, including this how-we-do repo to make sure our documentation is always up to date. To make a contribution, make sure to follow the deploying instructions","title":"How we contribute"},{"location":"deploying/","text":"How we deploy When deploying a change to one of our repo's master branch we follow the following steps: 1. Branch out When making a change to any codebase on wakeflow's repos, the first step is to create a branch that will contain the change. Branch naming: The branch name should start with your initials, so that anyone can tell who created the branch. If I (Andreas Kater) wanted to update the CSS styling on our website, I'd create a branch called ak/css-updates with the command gbo ak/css-updates (install our dotfiles to get access to shortcuts like gbo here ). I would then commit my changes to this branch. 2. Pull Request When the change is complete, we submit a pull request. The easiest way to do that is to checkout the branch with gc ak/css-updates and then create the PR with gpr . 3. Code Owner Review Every PR needs to be reviewed by a code owner of the repo. Github is configured in such a way that merging is not possible until this has taken place. 4. Rebase Once you have approval from at least one other team member, you rebase your changes. This basically squashes all commits you have on your branch into a single one, so that the master branch only has one commit for all the changes you made on your branch. This keeps the git history of our master branch clean and easy to understand. For example, in updating the CSS on our website, I might have made the following 3 commits: Those commits are useful while I'm working on the branch, but in our master branch's git history we don't need that level of detail. We want a single message there, that tells us what happened at a higher level: ak/css-updates . This message is usually the branch name. To rebase: 1. grbi origin/master and then follow the instructions. 2. You should see someting like: `pick 52a18f6 updated deploying.md` `pick 35a32e9 updated images` `pick b003d67 updates merge instructions` Typically you'll want to edit this file like so: r 52a18f6 updated deploying.md <- the r stands for reword and lets you rename your commit message f 35a32e9 updated images <- the f stands for fixup and lets you incorporate these changes into the commit above, so that there is only one commit message f b003d67 updates merge instructions 5. Notify on Slack Once we have got approval from a code owner to merge, we notify the rest of the team on Slack. To do this, we send a message to the #deploy channel with the url of the PR we are about to merge, like so: When we merge in our changes on Github, Github Actions make sure that our code is deployed automatically. Therefore before merging, we want to make sure the team is alerted to the fact that a deploy is about to take place in case anything goes wrong and the rest of the team needs to step in to help. 6. Merge Once you have notified the team you can merge the PR. Check the git history is linear, by running gl . You should see someting like this: Check your branch is exactly one commit ahead of master . If not, rebase as explained above. Check out the master branch with gc master Run git merge ak/css-updates 7. Smoke test After rebasing and merging, we make sure that the deploy completes successfully, by watching the github actions complete. Once the Github Actions have successfully completed, we do a smoke test of the application, to: 1. make sure everything works as expected 2. make sure your changes are now live 8. Clean up branches Now that the change has been successfully deployed, we no longer need the feature branch. Therefore we delete it, both locally and remotely, using the command gdbb ak/css-updates (gdbb stands for git delete both branches). Run gl to check your feature branch is no longer there. Success! You're done. Questions If you have any questions about this process, just slack Andi.","title":"Deploying"},{"location":"deploying/#how-we-deploy","text":"When deploying a change to one of our repo's master branch we follow the following steps:","title":"How we deploy"},{"location":"deploying/#1-branch-out","text":"When making a change to any codebase on wakeflow's repos, the first step is to create a branch that will contain the change. Branch naming: The branch name should start with your initials, so that anyone can tell who created the branch. If I (Andreas Kater) wanted to update the CSS styling on our website, I'd create a branch called ak/css-updates with the command gbo ak/css-updates (install our dotfiles to get access to shortcuts like gbo here ). I would then commit my changes to this branch.","title":"1. Branch out"},{"location":"deploying/#2-pull-request","text":"When the change is complete, we submit a pull request. The easiest way to do that is to checkout the branch with gc ak/css-updates and then create the PR with gpr .","title":"2. Pull Request"},{"location":"deploying/#3-code-owner-review","text":"Every PR needs to be reviewed by a code owner of the repo. Github is configured in such a way that merging is not possible until this has taken place.","title":"3. Code Owner Review"},{"location":"deploying/#4-rebase","text":"Once you have approval from at least one other team member, you rebase your changes. This basically squashes all commits you have on your branch into a single one, so that the master branch only has one commit for all the changes you made on your branch. This keeps the git history of our master branch clean and easy to understand. For example, in updating the CSS on our website, I might have made the following 3 commits: Those commits are useful while I'm working on the branch, but in our master branch's git history we don't need that level of detail. We want a single message there, that tells us what happened at a higher level: ak/css-updates . This message is usually the branch name. To rebase: 1. grbi origin/master and then follow the instructions. 2. You should see someting like: `pick 52a18f6 updated deploying.md` `pick 35a32e9 updated images` `pick b003d67 updates merge instructions` Typically you'll want to edit this file like so: r 52a18f6 updated deploying.md <- the r stands for reword and lets you rename your commit message f 35a32e9 updated images <- the f stands for fixup and lets you incorporate these changes into the commit above, so that there is only one commit message f b003d67 updates merge instructions","title":"4. Rebase"},{"location":"deploying/#5-notify-on-slack","text":"Once we have got approval from a code owner to merge, we notify the rest of the team on Slack. To do this, we send a message to the #deploy channel with the url of the PR we are about to merge, like so: When we merge in our changes on Github, Github Actions make sure that our code is deployed automatically. Therefore before merging, we want to make sure the team is alerted to the fact that a deploy is about to take place in case anything goes wrong and the rest of the team needs to step in to help.","title":"5. Notify on Slack"},{"location":"deploying/#6-merge","text":"Once you have notified the team you can merge the PR. Check the git history is linear, by running gl . You should see someting like this: Check your branch is exactly one commit ahead of master . If not, rebase as explained above. Check out the master branch with gc master Run git merge ak/css-updates","title":"6. Merge"},{"location":"deploying/#7-smoke-test","text":"After rebasing and merging, we make sure that the deploy completes successfully, by watching the github actions complete. Once the Github Actions have successfully completed, we do a smoke test of the application, to: 1. make sure everything works as expected 2. make sure your changes are now live","title":"7. Smoke test"},{"location":"deploying/#8-clean-up-branches","text":"Now that the change has been successfully deployed, we no longer need the feature branch. Therefore we delete it, both locally and remotely, using the command gdbb ak/css-updates (gdbb stands for git delete both branches). Run gl to check your feature branch is no longer there. Success! You're done.","title":"8. Clean up branches"},{"location":"deploying/#questions","text":"If you have any questions about this process, just slack Andi.","title":"Questions"},{"location":"dotfiles/","text":"Dotfiles Dotfiles are configuration files that are usually hidden with a filename like .filename - hence the name dot files. At Wakeflow, we publish our dotfiles in the following repo: https://github.com/wakeflow/dotfiles The dotfiles contain our best practices and tools to accelerate our workflows. Questions If you need any help with installing these, reach out to Andi.","title":"Dotfiles"},{"location":"dotfiles/#dotfiles","text":"Dotfiles are configuration files that are usually hidden with a filename like .filename - hence the name dot files. At Wakeflow, we publish our dotfiles in the following repo: https://github.com/wakeflow/dotfiles The dotfiles contain our best practices and tools to accelerate our workflows.","title":"Dotfiles"},{"location":"dotfiles/#questions","text":"If you need any help with installing these, reach out to Andi.","title":"Questions"},{"location":"event_tracking/","text":"How we track events We track user events that help us understand our users' behaviour. Each event is associated with the email address of a user. Therefore in order to track an event, it needs to be linked to an individual email address. Contacts and traits, Events and properties The details we associate with users are called traits while the details we associate with events are called properties. For example, a person could have the following traits: { name: \"Joe Bloggs\", email: \"joe@wakeflow.io\", accountType: \"premium\" } While an event (say, a \"Form Submitted\" event) could have the following properties: { formId: 1423, title: \"Get in touch\", source: \"ad_campaign_412\" } Traits and properties are always defined in camelCase e.g. accountType rather than snake_cse or any other case. Event naming convention We follow the Object Action naming convention. This means that all event names start in the affected Object and then describe the action that has affected this Object. For example: Product Viewed Application Submitted Account Created The names of events are always given in Title Case, e.g. User Signed Up , rather than snake_case or any other case. How to log Events We use our in-house wakeflow-events package to track events. See instructions for how to use it here . List of identify calls and their properties wakeflowEvents.identify('joe@wakeflow.io',{ name:'Joe Bloggs', address:{ street: '10 Somewhere Road', city: 'London', postcode: 'W2 6BC' country: 'UK' } }) List of track calls and their properties wakeflowEvents.track('joe@wakeflow.io','User Logged In',{ method:'EmailAndPassword' }) wakeflowEvents.track('joe@wakeflow.io','User Logged Out') Questions If you have any questions about event tracking, reach out to andi@wakeflow.io","title":"Event Tracking"},{"location":"event_tracking/#how-we-track-events","text":"We track user events that help us understand our users' behaviour. Each event is associated with the email address of a user. Therefore in order to track an event, it needs to be linked to an individual email address.","title":"How we track events"},{"location":"event_tracking/#contacts-and-traits-events-and-properties","text":"The details we associate with users are called traits while the details we associate with events are called properties. For example, a person could have the following traits: { name: \"Joe Bloggs\", email: \"joe@wakeflow.io\", accountType: \"premium\" } While an event (say, a \"Form Submitted\" event) could have the following properties: { formId: 1423, title: \"Get in touch\", source: \"ad_campaign_412\" } Traits and properties are always defined in camelCase e.g. accountType rather than snake_cse or any other case.","title":"Contacts and traits, Events and properties"},{"location":"event_tracking/#event-naming-convention","text":"We follow the Object Action naming convention. This means that all event names start in the affected Object and then describe the action that has affected this Object. For example: Product Viewed Application Submitted Account Created The names of events are always given in Title Case, e.g. User Signed Up , rather than snake_case or any other case.","title":"Event naming convention"},{"location":"event_tracking/#how-to-log-events","text":"We use our in-house wakeflow-events package to track events. See instructions for how to use it here .","title":"How to log Events"},{"location":"event_tracking/#list-of-identify-calls-and-their-properties","text":"wakeflowEvents.identify('joe@wakeflow.io',{ name:'Joe Bloggs', address:{ street: '10 Somewhere Road', city: 'London', postcode: 'W2 6BC' country: 'UK' } })","title":"List of identify calls and their properties"},{"location":"event_tracking/#list-of-track-calls-and-their-properties","text":"wakeflowEvents.track('joe@wakeflow.io','User Logged In',{ method:'EmailAndPassword' }) wakeflowEvents.track('joe@wakeflow.io','User Logged Out')","title":"List of track calls and their properties"},{"location":"event_tracking/#questions","text":"If you have any questions about event tracking, reach out to andi@wakeflow.io","title":"Questions"},{"location":"firestore_backups/","text":"Firestore backups We use a github action to regularly take backups of Firestore on the projects that make use of this database. Setup Create a Google Storage Bucket, say with name: gs://firestore-backups Create a service account that has the following roles: [1] Cloud Datastore Import Export Admin [2] Storage Admin Create a JSON key file for the service account Add the keyfile's content as a secret to the github repo. Call the secret FIREBASE_BACKUP_GCLOUD_AUTH create the file .github/workflows/firestore_backup.yml in your repo Copy the below contents into that file Create a Pull Request Once the PR is approved, a Firestore backup will be taken every night at 3am. name: Firestore backup on: schedule: - cron: \"0 3 * * *\" jobs: backup: runs-on: ubuntu-latest steps: - uses: lfdm/firestore-backup-gh-action@1.0.0 with: gcloudAuth: ${{ secrets.FIREBASE_BACKUP_GCLOUD_AUTH }} projectId: swallow-quotes storageBucket: gs://firestore-backups Questions If you have any questions about this process, reach out to andi@wakeflow.io","title":"Firestore Backups"},{"location":"firestore_backups/#firestore-backups","text":"We use a github action to regularly take backups of Firestore on the projects that make use of this database.","title":"Firestore backups"},{"location":"firestore_backups/#setup","text":"Create a Google Storage Bucket, say with name: gs://firestore-backups Create a service account that has the following roles: [1] Cloud Datastore Import Export Admin [2] Storage Admin Create a JSON key file for the service account Add the keyfile's content as a secret to the github repo. Call the secret FIREBASE_BACKUP_GCLOUD_AUTH create the file .github/workflows/firestore_backup.yml in your repo Copy the below contents into that file Create a Pull Request Once the PR is approved, a Firestore backup will be taken every night at 3am. name: Firestore backup on: schedule: - cron: \"0 3 * * *\" jobs: backup: runs-on: ubuntu-latest steps: - uses: lfdm/firestore-backup-gh-action@1.0.0 with: gcloudAuth: ${{ secrets.FIREBASE_BACKUP_GCLOUD_AUTH }} projectId: swallow-quotes storageBucket: gs://firestore-backups","title":"Setup"},{"location":"firestore_backups/#questions","text":"If you have any questions about this process, reach out to andi@wakeflow.io","title":"Questions"},{"location":"holidays/","text":"How we holiday Annual Leave Everybody has annual leave of 25 days per year. Public Holidays There are 8 public holidays per year in England and Wales. You can take these days off on the date of the actual public holiday or at any other point in the year. This gives you a total holiday allowance of 33 days per year. Taking a holiday To take a holiday you need to submit a request at least two weeks before your first day off to contact@wakeflow.io. If you want to take public holiday on the date of the public holiday, you do not need to submit a request in advance, but please let the team know nonetheless. Carrying over holiday days to the next year The holiday year runs between 1 January and 31 December. If at the of the year you have days left over, you can take up to 5 of them over into the next year. If you have more than 5 days of holiday left untaken, they will be lost. Questions If you have any questions around taking holidays, please email contact@wakeflow.io","title":"Holidays"},{"location":"holidays/#how-we-holiday","text":"","title":"How we holiday"},{"location":"holidays/#annual-leave","text":"Everybody has annual leave of 25 days per year.","title":"Annual Leave"},{"location":"holidays/#public-holidays","text":"There are 8 public holidays per year in England and Wales. You can take these days off on the date of the actual public holiday or at any other point in the year. This gives you a total holiday allowance of 33 days per year.","title":"Public Holidays"},{"location":"holidays/#taking-a-holiday","text":"To take a holiday you need to submit a request at least two weeks before your first day off to contact@wakeflow.io. If you want to take public holiday on the date of the public holiday, you do not need to submit a request in advance, but please let the team know nonetheless.","title":"Taking a holiday"},{"location":"holidays/#carrying-over-holiday-days-to-the-next-year","text":"The holiday year runs between 1 January and 31 December. If at the of the year you have days left over, you can take up to 5 of them over into the next year. If you have more than 5 days of holiday left untaken, they will be lost.","title":"Carrying over holiday days to the next year"},{"location":"holidays/#questions","text":"If you have any questions around taking holidays, please email contact@wakeflow.io","title":"Questions"},{"location":"javascript/","text":"How we javascript Javascript has been around since the beginning of the internet and has evolved massively as a language. There are therefore many flavours of javascript one could write. Here are some of the approaches we take to make working with shared code bases easier. 1. Modules rather than CommonJS There are two ways you can use code from other files in Node. The traditional way is called CommonJS. It is being replaced by the more modern Module syntax. Example CommonJS syntax const moment = require('moment') exports.CONSTANT = 'I am a constant' exports.func = () => {} Example Module import moment from 'moment' import { namedImport } from 'somewhere' export const CONSTANT = 'I am a constant' const func = () => {} export default func Wherever possible we use the Module syntax. 2. Eslint When working as a team, using a linter ensures a shared style of coding. This helps everyone immediately get their bearings when looking at a colleague's latest work. We use eslint as our linter. Every codebase has a .eslintrc file that shares You can find our default .eslintrc file on our dofiles repo . Questions If you have any questions about this process, reach out to andi@wakeflow.io","title":"Javascript"},{"location":"javascript/#how-we-javascript","text":"Javascript has been around since the beginning of the internet and has evolved massively as a language. There are therefore many flavours of javascript one could write. Here are some of the approaches we take to make working with shared code bases easier.","title":"How we javascript"},{"location":"javascript/#1-modules-rather-than-commonjs","text":"There are two ways you can use code from other files in Node. The traditional way is called CommonJS. It is being replaced by the more modern Module syntax.","title":"1. Modules rather than CommonJS"},{"location":"javascript/#example-commonjs-syntax","text":"const moment = require('moment') exports.CONSTANT = 'I am a constant' exports.func = () => {}","title":"Example CommonJS syntax"},{"location":"javascript/#example-module","text":"import moment from 'moment' import { namedImport } from 'somewhere' export const CONSTANT = 'I am a constant' const func = () => {} export default func Wherever possible we use the Module syntax.","title":"Example Module"},{"location":"javascript/#2-eslint","text":"When working as a team, using a linter ensures a shared style of coding. This helps everyone immediately get their bearings when looking at a colleague's latest work. We use eslint as our linter. Every codebase has a .eslintrc file that shares You can find our default .eslintrc file on our dofiles repo .","title":"2. Eslint"},{"location":"javascript/#questions","text":"If you have any questions about this process, reach out to andi@wakeflow.io","title":"Questions"},{"location":"progression/","text":"Career Progression Timing Every year there are two dates where we systematically review the whole team and consider every team member for promotion. These are: 31 March 31 September Leading up to these dates we will collect feedback from clients and team members about your performance and consider whether a promotion has been earned. On these dates any promotions will be communicated. On average, developers should expect to be promoted every 12 to 18 months. Developer bands The following bands are designed to provide a structure to help better understand current competencies and act as a starting point for individualised discussions around progress. The criteria set out in each band is by no means exhaustive, but aims to provide a solid point of reference. 1. Associate Developer Pull Requests require multiple rounds of feedback to reach a mergeable state The basics of a language or framework are mastered, but more advanced concepts are unfamiliar Occasional issues following patterns and approaches within existing code bases Most comfortable working on tightly scoped features or routine problems Typically less than 2 years focused on a specific domain in a professional environment 2. Developer Pull Requests require occasional discussion around approach or implementation Clearly able to identify and follow predefined patterns or approaches in an existing code base Most comfortable working on clearly defined, well scoped features or problems Typically 2-5 years focused on a specific domain in a professional environment Being able to decide the priority level of a bug and set of the appropriate course of action Being able to understand user stories and translate them into technical requirements Being able to keep the client up to date on the day to day progress of a project 3. Senior Developer Pull Requests are a tool for communication of new features and a spring-board for higher-level discussions around approach Experienced and comfortable through the entire lifecycle of a feature, from ideation to delivery Can understand business drivers and make solid proposals to the relevant stakeholders for building new features or refining existing ones A subject matter expert in at least one programming environment Typically 5-8 years focused on a specific domain in a professional environment As Scrum Master, taking responsibility for making sure our scrum process happens Line managing other team members Managing all client communication on a project Being able to attend sales meetings and bring your technical expertise to the conversation Using your technical knowledge to put together a plan based on client requirements (Solutions Engineering) 4. Tech Lead Pull Requests are a mentoring tool to engage less experienced teammates and showcase best practices Highly adept at running and executing on multiple projects across multiple domains Heavily involved in setting and maintaining professional standards for the organisation as a whole A subject matter expert in a number of programming environments Training other developers on both technical and non technical skills Confident building and running small teams through substantial projects Typically 8-12 years focused on a specific domain in a professional environment 5. VP of Engineering Focus on defining and progressing processes and innovation at a company-wide level Fully capable of designing, owning and running entirely new, non-trivial systems Confident building and running larger teams through long-running, complex projects with multiple-stakeholders Recognised widely in the industry as having made substantial material contributions and considered a subject matter expert by peers Typically 12-15+ years focused on a specific domain in a professional environment The bands are based on those set out by the team at Basecamp Questions If you have any questions about this process, please reach out to Andi .","title":"Progression"},{"location":"progression/#career-progression","text":"","title":"Career Progression"},{"location":"progression/#timing","text":"Every year there are two dates where we systematically review the whole team and consider every team member for promotion. These are: 31 March 31 September Leading up to these dates we will collect feedback from clients and team members about your performance and consider whether a promotion has been earned. On these dates any promotions will be communicated. On average, developers should expect to be promoted every 12 to 18 months.","title":"Timing"},{"location":"progression/#developer-bands","text":"The following bands are designed to provide a structure to help better understand current competencies and act as a starting point for individualised discussions around progress. The criteria set out in each band is by no means exhaustive, but aims to provide a solid point of reference.","title":"Developer bands"},{"location":"progression/#1-associate-developer","text":"Pull Requests require multiple rounds of feedback to reach a mergeable state The basics of a language or framework are mastered, but more advanced concepts are unfamiliar Occasional issues following patterns and approaches within existing code bases Most comfortable working on tightly scoped features or routine problems Typically less than 2 years focused on a specific domain in a professional environment","title":"1. Associate Developer"},{"location":"progression/#2-developer","text":"Pull Requests require occasional discussion around approach or implementation Clearly able to identify and follow predefined patterns or approaches in an existing code base Most comfortable working on clearly defined, well scoped features or problems Typically 2-5 years focused on a specific domain in a professional environment Being able to decide the priority level of a bug and set of the appropriate course of action Being able to understand user stories and translate them into technical requirements Being able to keep the client up to date on the day to day progress of a project","title":"2. Developer"},{"location":"progression/#3-senior-developer","text":"Pull Requests are a tool for communication of new features and a spring-board for higher-level discussions around approach Experienced and comfortable through the entire lifecycle of a feature, from ideation to delivery Can understand business drivers and make solid proposals to the relevant stakeholders for building new features or refining existing ones A subject matter expert in at least one programming environment Typically 5-8 years focused on a specific domain in a professional environment As Scrum Master, taking responsibility for making sure our scrum process happens Line managing other team members Managing all client communication on a project Being able to attend sales meetings and bring your technical expertise to the conversation Using your technical knowledge to put together a plan based on client requirements (Solutions Engineering)","title":"3. Senior Developer"},{"location":"progression/#4-tech-lead","text":"Pull Requests are a mentoring tool to engage less experienced teammates and showcase best practices Highly adept at running and executing on multiple projects across multiple domains Heavily involved in setting and maintaining professional standards for the organisation as a whole A subject matter expert in a number of programming environments Training other developers on both technical and non technical skills Confident building and running small teams through substantial projects Typically 8-12 years focused on a specific domain in a professional environment","title":"4. Tech Lead"},{"location":"progression/#5-vp-of-engineering","text":"Focus on defining and progressing processes and innovation at a company-wide level Fully capable of designing, owning and running entirely new, non-trivial systems Confident building and running larger teams through long-running, complex projects with multiple-stakeholders Recognised widely in the industry as having made substantial material contributions and considered a subject matter expert by peers Typically 12-15+ years focused on a specific domain in a professional environment The bands are based on those set out by the team at Basecamp","title":"5. VP of Engineering"},{"location":"progression/#questions","text":"If you have any questions about this process, please reach out to Andi .","title":"Questions"},{"location":"testing/","text":"How we test Testing allows us to ensure our code behaves the way it is intented to and, more importantly, that we don't change that desired behaviour when editing existing code bases. Mocha npm i mocha Our preferred testing framework is called Mocha. Where possible we use this framework across projects, because it makes it easier for everyone on the team to specialise in the same testing framework. Example package.json scripts { scripts:{ \"test\": \"mocha --parallel \\\"tests/**/*.test.js\\\" --timeout 15000\", \"watch\": \"mocha --parallel \\\"tests/**/*.test.js\\\" --timeout 5000 --watch\", \"watch-one\": \"mocha --parallel \\\"tests/**/getDeflectionDoc.test.js\\\" --timeout 5000 --watch \" } } The test script should run all of the tests that exist on the project. It is used by our CI/CD workflow to ensure all tests pass before new code is released to production. The watch script reruns all tests continuously everytime to save a file. This is useful for running in development (especially when we are doing test driven development and are editing the codebase to make the tests pass) The watch-one script works like the watch script, except it only runs a single test file. When you have many tests in a project, it can take a long time for all of them to run. Therefore just watching the single one that you're trying to make pass can save time. To change the test that is being watched, edit the regex in the script command in the package.json file. Questions If you have any questions about this process, reach out to andi@wakeflow.io","title":"Testing"},{"location":"testing/#how-we-test","text":"Testing allows us to ensure our code behaves the way it is intented to and, more importantly, that we don't change that desired behaviour when editing existing code bases.","title":"How we test"},{"location":"testing/#mocha","text":"npm i mocha Our preferred testing framework is called Mocha. Where possible we use this framework across projects, because it makes it easier for everyone on the team to specialise in the same testing framework.","title":"Mocha"},{"location":"testing/#example-packagejson-scripts","text":"{ scripts:{ \"test\": \"mocha --parallel \\\"tests/**/*.test.js\\\" --timeout 15000\", \"watch\": \"mocha --parallel \\\"tests/**/*.test.js\\\" --timeout 5000 --watch\", \"watch-one\": \"mocha --parallel \\\"tests/**/getDeflectionDoc.test.js\\\" --timeout 5000 --watch \" } } The test script should run all of the tests that exist on the project. It is used by our CI/CD workflow to ensure all tests pass before new code is released to production. The watch script reruns all tests continuously everytime to save a file. This is useful for running in development (especially when we are doing test driven development and are editing the codebase to make the tests pass) The watch-one script works like the watch script, except it only runs a single test file. When you have many tests in a project, it can take a long time for all of them to run. Therefore just watching the single one that you're trying to make pass can save time. To change the test that is being watched, edit the regex in the script command in the package.json file.","title":"Example package.json scripts"},{"location":"testing/#questions","text":"If you have any questions about this process, reach out to andi@wakeflow.io","title":"Questions"},{"location":"trainingMaterials/","text":"Training Materials Here are some resources we use to learn our trade and keep up to date. CSS CSS Learning Guide Flexbox Learning Game \ud83d\udc38 Color fun Redux Redux Learning Guide Javascript Twilio Quest Basic JS \u2694\ufe0f Looker Tutorial Video Tutorials MessageBird MessageBird Tutorials \ud83d\udc26 React Beginners Tutorial Git Twilio Quest Git \ud83d\udd6f\ufe0f","title":"Train"},{"location":"trainingMaterials/#training-materials","text":"Here are some resources we use to learn our trade and keep up to date.","title":"Training Materials"},{"location":"trainingMaterials/#css","text":"CSS Learning Guide Flexbox Learning Game \ud83d\udc38 Color fun","title":"CSS"},{"location":"trainingMaterials/#redux","text":"Redux Learning Guide","title":"Redux"},{"location":"trainingMaterials/#javascript","text":"Twilio Quest Basic JS \u2694\ufe0f","title":"Javascript"},{"location":"trainingMaterials/#looker","text":"Tutorial Video Tutorials","title":"Looker"},{"location":"trainingMaterials/#messagebird","text":"MessageBird Tutorials \ud83d\udc26","title":"MessageBird"},{"location":"trainingMaterials/#react","text":"Beginners Tutorial","title":"React"},{"location":"trainingMaterials/#git","text":"Twilio Quest Git \ud83d\udd6f\ufe0f","title":"Git"},{"location":"validation/","text":"How we validate In programming you often need to check that a variable has acceptable values. E.g. You want to check that - a street name is no longer than 25 characters - a phone number has only numbers and the + character - an age is a number between 0 and 100 JSON-Schema There are countless libraries out there that allow you to perform these checks. In order to make it easy for all the members of our team to work together, we therefore all use the same approach. This is called JSON-Schema. JSON-Schema is a standard (rather than an individual library) that allows you to define what a variable looks like. The definition of the schema is a JSON-object and can be stored in a .json file in a /schemas folder. To familiarise yourself with the format that a JSON-Schema takes, please have a look at json-schema.org . Example JSON-Schema const schema = { type: 'object', required: [id,status], properties: { id: { type: 'integer', example: 123, minimum: 0, maximum: 10 ** 20 }, url: { type: 'string', maxLength: 255, example: 'https://mywebsite.com' }, status: { type: 'string', enum: ['active','inactive'], example: 'active', default: 'active' }, } }; Example Validation Code const Validator = require('jsonschema').Validator; const validator = new Validator(); const validateJsonSchema = (data,schema) => { const result = validator.validate(data,schema,{ nestedErrors: true }); result.errors.forEach(error=>{ console.log(error) }); }; Questions If you have any questions about this process, reach out to andi@wakeflow.io","title":"Validation"},{"location":"validation/#how-we-validate","text":"In programming you often need to check that a variable has acceptable values. E.g. You want to check that - a street name is no longer than 25 characters - a phone number has only numbers and the + character - an age is a number between 0 and 100","title":"How we validate"},{"location":"validation/#json-schema","text":"There are countless libraries out there that allow you to perform these checks. In order to make it easy for all the members of our team to work together, we therefore all use the same approach. This is called JSON-Schema. JSON-Schema is a standard (rather than an individual library) that allows you to define what a variable looks like. The definition of the schema is a JSON-object and can be stored in a .json file in a /schemas folder. To familiarise yourself with the format that a JSON-Schema takes, please have a look at json-schema.org .","title":"JSON-Schema"},{"location":"validation/#example-json-schema","text":"const schema = { type: 'object', required: [id,status], properties: { id: { type: 'integer', example: 123, minimum: 0, maximum: 10 ** 20 }, url: { type: 'string', maxLength: 255, example: 'https://mywebsite.com' }, status: { type: 'string', enum: ['active','inactive'], example: 'active', default: 'active' }, } };","title":"Example JSON-Schema"},{"location":"validation/#example-validation-code","text":"const Validator = require('jsonschema').Validator; const validator = new Validator(); const validateJsonSchema = (data,schema) => { const result = validator.validate(data,schema,{ nestedErrors: true }); result.errors.forEach(error=>{ console.log(error) }); };","title":"Example Validation Code"},{"location":"validation/#questions","text":"If you have any questions about this process, reach out to andi@wakeflow.io","title":"Questions"}]}